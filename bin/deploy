#!/usr/bin/env bash

# Prepare Git committer information
git config user.email "martin@cptactionhank.xyz"
git config user.name "Circle CI Automated Builder"

# Obtain the currently latest version of Atlassian Confluence version defined by the
# Dockerfile in this repository.
VERSION=$(sed -nr 's/ENV CONF_VERSION[[:space:]]*(.+)/\1/p' Dockerfile)

echo "Checking if there has been made any modifications"

git diff --exit-code .

if [ $? == 0 ]; then

	# The specific branch already exists, consider committing a patch if there
	# was actual changes to the repository.
	echo "There was no changes. Skipping deployment..."

else

	echo "Committing changes"

	# add changes made to current branch
	git add --all
	git commit --message "Updated Atlassian JIRA master branch to latest version ${VERSION}"

	# push changes made to current branch
	git push origin master

fi

echo "Checking if branch is already available?"

git fetch --all &> /dev/null
git show-branch "origin/${VERSION}" &> /dev/null

if [ $? == 0 ]; then

	# The specific branch already exists, consider committing a patch if there
	# was actual changes to the repository.
	echo "Branch '${VERSION}' already exist. Skipping..."

else

	# Create a new orphaned version branch to the repository with the current
	# changes performed in the master repository and thereby keeps the `master`
	# and latest version branch in sync.
	echo "Creating new branch '${VERSION}'"

	git checkout --orphan "${VERSION}"

	# We do not want to include README.md in version branches since the latest
	# built branch from the Docker Hub will use that README.md which could be
	# misleading. Contributing is also taken out to ensure a single place for
	# the most up-to-date information.
	rm --recursive --force "README.md" "CONTRIBUTING.md"

	# Perform initial commit with the current directory as is (ie. prepared for
	# the new version branch).
	echo "Committing changes"

	git add --all
	git commit --message "Created new Atlassian Confluence branch for version ${VERSION}"

	# Acutally push the new branch to the origin repository (GitHub) such that
	# the changes are published for the Docker Hub repository and everyone else.
	echo "Pushing new branch '${VERSION}'"

	git push "origin" "${VERSION}" || exit 255

	# Notify the new branch has been deployed.
	echo "Deployed new version to new branch '${VERSION}'"

fi
